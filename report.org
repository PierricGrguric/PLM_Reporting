* Introduction
This file contains the reporting for my internship
Main part of my internship:
- Create a docker that deploy a server of webPLM from scratch
- Setup small test to see if the app is running correctly
- Setup a load Test
* Bibliography
* Journal
** Day 1 24/06
- research about JMeter, Play Framework, and Docker
*** Questions
- What I have to do during the internship and how ?
*** Work Planned
****** DONE Determinate the different part of my internship
** Day 2 25/06
- read the doc about writing my reporting
- configuration of Jabber
- first look on provided reports
*** Questions
- none
*** Work Planned
****** DONE install emacs and setup orgmode
****** DONE read the provided reports
****** TODO create a docker for the server setup
** Day 3 26/06
- install Boot2Docker to use dockers
- found a dockerfile of a play framework
*** Questions
- how to communicate with a docker ? (research in progress)
*** Work Planned
****** DONE understand what is in the dockerfile
****** DONE change the dockerfile to add webPLM
** Day 4 29/06
- debug of Boot2Docker (need a delete & init to rework)
- play framework dockerfile understanding (except the Expose line)
- attended to Marion Guthmuller's PHD defence 
*** Work Planned
****** DONE learn how to use the expose command properly (ie how to contact a docker)
** Day 5 30/06
- wrote first Dockerfile to learn how to do it
- push it to a public repository (http://registry.hub.docker.com/u/pierricgrguric/docker-whale/)
- Expose in a Dockerfile means the docker listen to this port but from the outside it's an other port.
*** Questions
- How to set the port to contact a docker ?
*** Work Planned
****** DONE do a dockerfile with play framework and webplm without port open
****** DONE open the port of this container
****** DONE contact this container
** Day 6 01/07
- wrote and build a dockerfile with play framework and webplm(and all packages required), but unable to execute activator run
- pushed it to https://github.com/PierricGrguric/PLM_Dockerfile
- learned how to interact with a docker (EXPOSE and -p option) with a tutorial docker (https://github.com/docker-training/webapp)
*** Work Planned
****** DONE find why activator run doesn't work and fix it
** Day 7 02/07
- found the problem: some dependencies of play framework can't be downloaded
- started an angular.js mooc (https://angularjs.org/  --> Learn Angular in your browser for free!)
*** Work Planned
****** DONE finish the angular.js mooc
** Day 8 03/07
- built an operationnal docker for webplm
- angular.js mooc
*** Work Planned
****** DONE start javascript tests
** Day 9 06/07
- finished the angular.js mooc
- did some research about link between containers
*** Work Planned
****** DONE rewrite the dockerfile (split in one with play framework, the other extends from the first with plm)
****** DONE create a depository for the docker image on docker hub
** Day 10 07/07
- writed a dockerFile to have only play framework in a docker (https://github.com/PierricGrguric/PLM_Dockerfile)
- pushed the image to https://registry.hub.docker.com/u/pierricgrguric/docker-play-framework/
- writed a dockerfile to have plm in adocker (build from the previous docker)
- pushed the image to https://registry.hub.docker.com/u/pierricgrguric/docker-plm/
*** Work Planned
****** DONE make a list of javascripts tests already done
****** DONE make a list of javascripts tests missing
** Day 11 08/07
- for the universe buggle, tests already here (just apply-reverse is missing)
- the other universe are: baseball, dutchFlag, hanoi, pancake, and sort (bat isn't worth testing yet)
- forked the repo, and i will make a pull request with a different branch for every universe tested
- installed node.js and grunt (tools needed for testing)
- started to understand the tests already existing
*** Work Planned
****** DONE fully understand the tests already existing
****** DONE add the apply-reverse test in the buggle universe
****** RESCHEDULE test the universe baseball
****** DONE test the universe dutchFlag
** Day 12 09/07
- finished to understand the tests already existing
- started to implement the apply-reverse tests
*** Work Planned
****** RESCHEDULE test the universe hanoi
** Day 13 10/07
- nearly finished the apply-reverse tests
- did some research about JSLint
- read about AngularJS styleguide (https://github.com/toddmotto/angularjs-styleguide)
- started to think of which tests we need for the baseball universe
** Day 14 15/07
- finished the tests on the buggle universe
- ordered the universe to tests them with increasing difficulty (sort, dutchFlag, pancake, hanoi, baseball)
- started to test the sort universe
*** Work Planned
****** DONE finish the sort universe
****** DONE make a pull request for the test-buggle branch
** Day 15 16/07
- testing the sort universe
** Day 16 17/07
- resolved bug with the tests of the sort universe
** Day 17 20/07
- corrected the test of buggle universe and made a pull request
- testing the sort universe
** Day 18 21/07
- finished the sort universe
- made a pull request for the sort universe
- started dutchFlag universe
** Day 19 22/07
- finished the dutchFlag universe
- nearly finished the pancake universe
** Day 20 23/07
- found a bug in the pancake universe (with burnedPancake)
*** Work Planned
****** RESCHEDULE finish to test the universe before next week
** Day 21 24/07
- corrected the bug in the pancake universe (oldNumber was wrong, so the view when reverse was applied was false)(fix: move the attribut from currentWorld to flipoperation)
- the other bug: insideOut wasn't inversed when number==1 and reverse was applied, fixed.
- finished the pancake universe tests
- universe hanoi and baseball still untested but i will start load test next week. these two universe will be tested if i have time after load test.
** Day 22 27/07
- made a pull request for the pancake universe (test and bug resolving)
- installed protractor: a Node.js program to do E2E test
- done a tutorial about protractor
*** Work Planned
****** DONE create a basic protractor test
** Day 23 28/07
- started small protractor test
- bug when trying to catch an item by class
*** Work planned
****** TODO simulate a user resolving the first exercise
****** TODO create an account on grid5000
